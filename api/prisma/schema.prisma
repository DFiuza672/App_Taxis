// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum para status do motorista e papel do usuário
enum DriverStatus {
  disponivel
  indisponivel
}

enum UserRole {
  admin
  driver
}

enum AssignmentStatus {
  atribuido
  concluido
  cancelado
}

// Tabela de usuários para login
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String
  role          UserRole  @default(driver)
  driver        Driver?   @relation(fields: [driverId], references: [id])
  driverId      String?   @unique
  assignments   Assignment[] // Admin que atribuiu
  auditLogs     AuditLog[]   // Usuário que realizou a ação
  createdAt     DateTime  @default(now())
}

// Tabela de motoristas
model Driver {
  id              String         @id @default(cuid())
  user            User?
  name            String
  phone           String?
  status          DriverStatus   @default(disponivel)
  queuePosition   QueuePosition?
  assignments     Assignment[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

// Tabela que representa a fila. Relação 1-para-1 com Driver.
model QueuePosition {
  position  Int     @unique
  driver    Driver  @relation(fields: [driverId], references: [id])
  driverId  String  @id @unique // Garante que um motorista só pode ter uma posição
  updatedAt DateTime @updatedAt
}

// Tabela de clientes
model Customer {
  id              String       @id @default(cuid())
  name            String
  phone           String
  pickupLocation  String?
  dropoffLocation String?
  notes           String?
  assignments     Assignment[]
  createdAt       DateTime     @default(now())
}

// Tabela de atribuições (corridas)
model Assignment {
  id                String           @id @default(cuid())
  driver            Driver           @relation(fields: [driverId], references: [id])
  driverId          String
  customer          Customer         @relation(fields: [customerId], references: [id])
  customerId        String
  assignedBy        User             @relation(fields: [assignedByAdminId], references: [id])
  assignedByAdminId String
  status            AssignmentStatus @default(atribuido)
  notes             String?
  assignedAt        DateTime         @default(now())
}

// Tabela de logs de auditoria
model AuditLog {
  id          String   @id @default(cuid())
  actor       User     @relation(fields: [actorUserId], references: [id])
  actorUserId String
  action      String   // Ex: "queue.reorder", "assignment.create"
  target      String   // Ex: "driver:cuid_do_driver"
  payload     Json?    // Detalhes da mudança
  createdAt   DateTime @default(now())
}