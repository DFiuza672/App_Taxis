version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: coop_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  api:
    container_name: coop_api
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET} # Mesmo com sessões, pode ser usado para CSRF ou outros tokens
      NODE_ENV: development
      PORT: 4000
    command: >
      bash -c "npx prisma migrate deploy &&
               npx prisma db seed &&
               npm run start:dev"
    volumes:
      - ./api:/usr/src/app # Volume para hot-reloading
      - /usr/src/app/node_modules # Evita sobrescrever node_modules do container

  web:
    container_name: coop_web
    build:
      context: ./web
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - api
    environment:
      NEXT_PUBLIC_API_URL: http://api:4000 # Comunicação interna entre containers
      NODE_ENV: development
    volumes:
      - ./web:/usr/src/app
      - /usr/src/app/node_modules
      - /usr/src/app/.next

volumes:
  postgres_data:
    driver: local